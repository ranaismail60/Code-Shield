#include <iostream>
using namespace std;
class node
{
public:
	int data;
	node* next;
	node(int d)
	{
		this->data = d;
		next = NULL;
	}
	~node()
	{
		if (next)
		{
			delete next;
			next = NULL;
		}
	}
};
int len(node*head)
{
	node*temp = head;
	int siz = 0;
	while (temp != NULL)
	{
		temp= temp->next;
		siz++;
	}
	return siz;
}
node* rotate(node*head, int k)
{
	if (k == 0)
	{
		return head;
	}
	else if (head == NULL)
	{
		return NULL;
	}
	int size = len(head);
	int effect = k%size;
	
	if (effect == 0)
	{
		return head;

	}
	node*ptr = head;
	for (int i = 1; i < size - effect; i++)
	{
		ptr = ptr->next;
	}

	node*nhead = ptr->next;
	ptr->next = NULL;

	node* ptr2 = nhead;
	while (ptr2->next!= NULL)
	{
		ptr2 = ptr2->next;
	}
	ptr2->next = head;


	return nhead;
}


void printList(node* head) 
{
	node* temp = head;
	while (temp != NULL) {
		cout << temp->data << " -> ";
		temp = temp->next;
	}
	cout << "NULL" << endl;
}

int main()
{
	node*root = new node(11);
	root->next = new node(22);
	root->next->next = new node(33);
	root->next->next->next = new node(33);

	cout << "Original List: ";
	printList(root);

	node* rotatedList = rotate(root, 2);

	cout << "Rotated List: ";
	printList(rotatedList);

	delete root;
	root = NULL;

	system("pause");
	return 0;
}
